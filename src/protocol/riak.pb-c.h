/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_riak_2eproto__INCLUDED
#define PROTOBUF_C_riak_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _RpbErrorResp RpbErrorResp;
typedef struct _RpbGetServerInfoResp RpbGetServerInfoResp;
typedef struct _RpbPair RpbPair;


/* --- enums --- */


/* --- messages --- */

struct  _RpbErrorResp
{
  ProtobufCMessage base;
  ProtobufCBinaryData errmsg;
  uint32_t errcode;
};
#define RPB_ERROR_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_error_resp__descriptor) \
    , {0,NULL}, 0 }


struct  _RpbGetServerInfoResp
{
  ProtobufCMessage base;
  protobuf_c_boolean has_node;
  ProtobufCBinaryData node;
  protobuf_c_boolean has_server_version;
  ProtobufCBinaryData server_version;
};
#define RPB_GET_SERVER_INFO_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_get_server_info_resp__descriptor) \
    , 0,{0,NULL}, 0,{0,NULL} }


struct  _RpbPair
{
  ProtobufCMessage base;
  ProtobufCBinaryData key;
  protobuf_c_boolean has_value;
  ProtobufCBinaryData value;
};
#define RPB_PAIR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpb_pair__descriptor) \
    , {0,NULL}, 0,{0,NULL} }


/* RpbErrorResp methods */
void   rpb_error_resp__init
                     (RpbErrorResp         *message);
size_t rpb_error_resp__get_packed_size
                     (const RpbErrorResp   *message);
size_t rpb_error_resp__pack
                     (const RpbErrorResp   *message,
                      uint8_t             *out);
size_t rpb_error_resp__pack_to_buffer
                     (const RpbErrorResp   *message,
                      ProtobufCBuffer     *buffer);
RpbErrorResp *
       rpb_error_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_error_resp__free_unpacked
                     (RpbErrorResp *message,
                      ProtobufCAllocator *allocator);
/* RpbGetServerInfoResp methods */
void   rpb_get_server_info_resp__init
                     (RpbGetServerInfoResp         *message);
size_t rpb_get_server_info_resp__get_packed_size
                     (const RpbGetServerInfoResp   *message);
size_t rpb_get_server_info_resp__pack
                     (const RpbGetServerInfoResp   *message,
                      uint8_t             *out);
size_t rpb_get_server_info_resp__pack_to_buffer
                     (const RpbGetServerInfoResp   *message,
                      ProtobufCBuffer     *buffer);
RpbGetServerInfoResp *
       rpb_get_server_info_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_get_server_info_resp__free_unpacked
                     (RpbGetServerInfoResp *message,
                      ProtobufCAllocator *allocator);
/* RpbPair methods */
void   rpb_pair__init
                     (RpbPair         *message);
size_t rpb_pair__get_packed_size
                     (const RpbPair   *message);
size_t rpb_pair__pack
                     (const RpbPair   *message,
                      uint8_t             *out);
size_t rpb_pair__pack_to_buffer
                     (const RpbPair   *message,
                      ProtobufCBuffer     *buffer);
RpbPair *
       rpb_pair__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpb_pair__free_unpacked
                     (RpbPair *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*RpbErrorResp_Closure)
                 (const RpbErrorResp *message,
                  void *closure_data);
typedef void (*RpbGetServerInfoResp_Closure)
                 (const RpbGetServerInfoResp *message,
                  void *closure_data);
typedef void (*RpbPair_Closure)
                 (const RpbPair *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor rpb_error_resp__descriptor;
extern const ProtobufCMessageDescriptor rpb_get_server_info_resp__descriptor;
extern const ProtobufCMessageDescriptor rpb_pair__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_riak_2eproto__INCLUDED */
